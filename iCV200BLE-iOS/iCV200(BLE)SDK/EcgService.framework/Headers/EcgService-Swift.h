#if 0
#elif defined(__arm64e__) && __arm64e__
// Generated by Apple Swift version 5.0.1 (swiftlang-1001.0.82.4 clang-1001.0.46.5)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="EcgService",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC10EcgService14AnalysisResult")
@interface AnalysisResult : NSObject
@property (nonatomic, copy) NSArray<NSString *> * _Nullable autoInterpretationCodes;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable minnesotaCodes;
@property (nonatomic, copy, getter=template, setter=setTemplate:) NSArray<NSArray<NSNumber *> *> * _Nullable template_;
@property (nonatomic, copy) NSString * _Nullable heartBeatRate;
@property (nonatomic, copy) NSArray<NSDictionary<NSString *, NSString *> *> * _Nullable measurement;
@property (nonatomic, copy) NSArray<NSArray<NSNumber *> *> * _Nullable onoff;
@property (nonatomic, copy) NSString * _Nullable error;
@property (nonatomic, copy) NSString * _Nullable parameters;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable RRs;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable beatPositions;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable beatTypes;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10EcgService8Analyzer")
@interface Analyzer : NSObject
- (AnalysisResult * _Nonnull)analyzeWithData:(NSArray<NSArray<NSNumber *> *> * _Nonnull)data sampling:(NSInteger)sampling age:(NSInteger)age ageUnit:(NSString * _Nonnull)ageUnit gender:(NSString * _Nonnull)gender newBornMode:(NSInteger)newBornMode backRecording:(BOOL)backRecording SWIFT_WARN_UNUSED_RESULT;
- (AnalysisResult * _Nonnull)analyzeManualWithData:(NSArray<NSArray<NSNumber *> *> * _Nonnull)data sampling:(NSInteger)sampling age:(NSInteger)age ageUnit:(NSString * _Nonnull)ageUnit gender:(NSString * _Nonnull)gender newBornMode:(NSInteger)newBornMode backRecording:(BOOL)backRecording lead:(NSInteger)lead onOff:(int16_t * _Nullable)onOff onOffs:(int16_t * _Nullable * _Nullable)onOffs SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol DeviceCommunicationDelegate;
@class NSData;

SWIFT_CLASS("_TtC10EcgService9BleDevice")
@interface BleDevice : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// This function is for setting the delegate to receive events
- (void)setCommDelegate:(id <DeviceCommunicationDelegate> _Nonnull)delegate;
/// This function is for setting up a bunch of parameters
/// \param highPassFreq High pass frequency
///
/// \param lowPassFreq Low pass frequency
///
/// \param notchFreq Notch frequency
///
- (void)initializeWithSmoothEnabled:(BOOL)smoothEnabled baselineEnabled:(BOOL)baselineEnabled highPassFreq:(CGFloat)highPassFreq lowPassFreq:(CGFloat)lowPassFreq notchFreq:(CGFloat)notchFreq;
- (void)collectGarbage;
/// Call this function when there is new data received from BLE peripheral
/// \param data The raw data received
///
- (void)pushRawDataWithData:(NSData * _Nonnull)data;
- (void)testDelegate;
@end


SWIFT_PROTOCOL("_TtP10EcgService27DeviceCommunicationDelegate_")
@protocol DeviceCommunicationDelegate
/// This function will be called when there is data parsed
/// \param data The parsed data in type of [[CGFloat]]
///
- (void)dataReceivedWithData:(NSArray * _Null_unspecified)data;
/// This function will be called when a heart beat rate is calculated. Show this rate on monitor
/// \param hbr The heart beat rate
///
- (void)heartBeatRateDetectedWithHbr:(int32_t)hbr;
/// This function will be called when sampling rate is detected
/// \param rate The sampling rate is used by the BLE device
///
- (void)samplingRateReceivedWithRate:(int32_t)rate;
/// This function will be called when device ID is read
/// \param deviceId The device Id
///
- (void)deviceIdReceivedWithDeviceId:(NSString * _Null_unspecified)deviceId;
/// This function will be called when the device is initialized and ready for recording
- (void)deviceIsReadyToRecord;
/// This function will be called when there is any error occurred like data loss detected and alike
/// \param error The error spcified
///
- (void)dataErrorDetectedWithError:(NSError * _Null_unspecified)error;
@optional
/// This function is called to notify 12 lead connectivity status
- (void)leadsConnectivityStatusUpdatedWithCr:(int16_t)cr cl:(int16_t)cl c1:(int16_t)c1 c2:(int16_t)c2 c3:(int16_t)c3 c4:(int16_t)c4 c5:(int16_t)c5 c6:(int16_t)c6;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.0.1 (swiftlang-1001.0.82.4 clang-1001.0.46.5)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="EcgService",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC10EcgService14AnalysisResult")
@interface AnalysisResult : NSObject
@property (nonatomic, copy) NSArray<NSString *> * _Nullable autoInterpretationCodes;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable minnesotaCodes;
@property (nonatomic, copy, getter=template, setter=setTemplate:) NSArray<NSArray<NSNumber *> *> * _Nullable template_;
@property (nonatomic, copy) NSString * _Nullable heartBeatRate;
@property (nonatomic, copy) NSArray<NSDictionary<NSString *, NSString *> *> * _Nullable measurement;
@property (nonatomic, copy) NSArray<NSArray<NSNumber *> *> * _Nullable onoff;
@property (nonatomic, copy) NSString * _Nullable error;
@property (nonatomic, copy) NSString * _Nullable parameters;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable RRs;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable beatPositions;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable beatTypes;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10EcgService8Analyzer")
@interface Analyzer : NSObject
- (AnalysisResult * _Nonnull)analyzeWithData:(NSArray<NSArray<NSNumber *> *> * _Nonnull)data sampling:(NSInteger)sampling age:(NSInteger)age ageUnit:(NSString * _Nonnull)ageUnit gender:(NSString * _Nonnull)gender newBornMode:(NSInteger)newBornMode backRecording:(BOOL)backRecording SWIFT_WARN_UNUSED_RESULT;
- (AnalysisResult * _Nonnull)analyzeManualWithData:(NSArray<NSArray<NSNumber *> *> * _Nonnull)data sampling:(NSInteger)sampling age:(NSInteger)age ageUnit:(NSString * _Nonnull)ageUnit gender:(NSString * _Nonnull)gender newBornMode:(NSInteger)newBornMode backRecording:(BOOL)backRecording lead:(NSInteger)lead onOff:(int16_t * _Nullable)onOff onOffs:(int16_t * _Nullable * _Nullable)onOffs SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol DeviceCommunicationDelegate;
@class NSData;

SWIFT_CLASS("_TtC10EcgService9BleDevice")
@interface BleDevice : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// This function is for setting the delegate to receive events
- (void)setCommDelegate:(id <DeviceCommunicationDelegate> _Nonnull)delegate;
/// This function is for setting up a bunch of parameters
/// \param highPassFreq High pass frequency
///
/// \param lowPassFreq Low pass frequency
///
/// \param notchFreq Notch frequency
///
- (void)initializeWithSmoothEnabled:(BOOL)smoothEnabled baselineEnabled:(BOOL)baselineEnabled highPassFreq:(CGFloat)highPassFreq lowPassFreq:(CGFloat)lowPassFreq notchFreq:(CGFloat)notchFreq;
- (void)collectGarbage;
/// Call this function when there is new data received from BLE peripheral
/// \param data The raw data received
///
- (void)pushRawDataWithData:(NSData * _Nonnull)data;
- (void)testDelegate;
@end


SWIFT_PROTOCOL("_TtP10EcgService27DeviceCommunicationDelegate_")
@protocol DeviceCommunicationDelegate
/// This function will be called when there is data parsed
/// \param data The parsed data in type of [[CGFloat]]
///
- (void)dataReceivedWithData:(NSArray * _Null_unspecified)data;
/// This function will be called when a heart beat rate is calculated. Show this rate on monitor
/// \param hbr The heart beat rate
///
- (void)heartBeatRateDetectedWithHbr:(int32_t)hbr;
/// This function will be called when sampling rate is detected
/// \param rate The sampling rate is used by the BLE device
///
- (void)samplingRateReceivedWithRate:(int32_t)rate;
/// This function will be called when device ID is read
/// \param deviceId The device Id
///
- (void)deviceIdReceivedWithDeviceId:(NSString * _Null_unspecified)deviceId;
/// This function will be called when the device is initialized and ready for recording
- (void)deviceIsReadyToRecord;
/// This function will be called when there is any error occurred like data loss detected and alike
/// \param error The error spcified
///
- (void)dataErrorDetectedWithError:(NSError * _Null_unspecified)error;
@optional
/// This function is called to notify 12 lead connectivity status
- (void)leadsConnectivityStatusUpdatedWithCr:(int16_t)cr cl:(int16_t)cl c1:(int16_t)c1 c2:(int16_t)c2 c3:(int16_t)c3 c4:(int16_t)c4 c5:(int16_t)c5 c6:(int16_t)c6;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7S__) && __ARM_ARCH_7S__
// Generated by Apple Swift version 5.0.1 (swiftlang-1001.0.82.4 clang-1001.0.46.5)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="EcgService",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC10EcgService14AnalysisResult")
@interface AnalysisResult : NSObject
@property (nonatomic, copy) NSArray<NSString *> * _Nullable autoInterpretationCodes;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable minnesotaCodes;
@property (nonatomic, copy, getter=template, setter=setTemplate:) NSArray<NSArray<NSNumber *> *> * _Nullable template_;
@property (nonatomic, copy) NSString * _Nullable heartBeatRate;
@property (nonatomic, copy) NSArray<NSDictionary<NSString *, NSString *> *> * _Nullable measurement;
@property (nonatomic, copy) NSArray<NSArray<NSNumber *> *> * _Nullable onoff;
@property (nonatomic, copy) NSString * _Nullable error;
@property (nonatomic, copy) NSString * _Nullable parameters;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable RRs;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable beatPositions;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable beatTypes;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10EcgService8Analyzer")
@interface Analyzer : NSObject
- (AnalysisResult * _Nonnull)analyzeWithData:(NSArray<NSArray<NSNumber *> *> * _Nonnull)data sampling:(NSInteger)sampling age:(NSInteger)age ageUnit:(NSString * _Nonnull)ageUnit gender:(NSString * _Nonnull)gender newBornMode:(NSInteger)newBornMode backRecording:(BOOL)backRecording SWIFT_WARN_UNUSED_RESULT;
- (AnalysisResult * _Nonnull)analyzeManualWithData:(NSArray<NSArray<NSNumber *> *> * _Nonnull)data sampling:(NSInteger)sampling age:(NSInteger)age ageUnit:(NSString * _Nonnull)ageUnit gender:(NSString * _Nonnull)gender newBornMode:(NSInteger)newBornMode backRecording:(BOOL)backRecording lead:(NSInteger)lead onOff:(int16_t * _Nullable)onOff onOffs:(int16_t * _Nullable * _Nullable)onOffs SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol DeviceCommunicationDelegate;
@class NSData;

SWIFT_CLASS("_TtC10EcgService9BleDevice")
@interface BleDevice : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// This function is for setting the delegate to receive events
- (void)setCommDelegate:(id <DeviceCommunicationDelegate> _Nonnull)delegate;
/// This function is for setting up a bunch of parameters
/// \param highPassFreq High pass frequency
///
/// \param lowPassFreq Low pass frequency
///
/// \param notchFreq Notch frequency
///
- (void)initializeWithSmoothEnabled:(BOOL)smoothEnabled baselineEnabled:(BOOL)baselineEnabled highPassFreq:(CGFloat)highPassFreq lowPassFreq:(CGFloat)lowPassFreq notchFreq:(CGFloat)notchFreq;
- (void)collectGarbage;
/// Call this function when there is new data received from BLE peripheral
/// \param data The raw data received
///
- (void)pushRawDataWithData:(NSData * _Nonnull)data;
- (void)testDelegate;
@end


SWIFT_PROTOCOL("_TtP10EcgService27DeviceCommunicationDelegate_")
@protocol DeviceCommunicationDelegate
/// This function will be called when there is data parsed
/// \param data The parsed data in type of [[CGFloat]]
///
- (void)dataReceivedWithData:(NSArray * _Null_unspecified)data;
/// This function will be called when a heart beat rate is calculated. Show this rate on monitor
/// \param hbr The heart beat rate
///
- (void)heartBeatRateDetectedWithHbr:(int32_t)hbr;
/// This function will be called when sampling rate is detected
/// \param rate The sampling rate is used by the BLE device
///
- (void)samplingRateReceivedWithRate:(int32_t)rate;
/// This function will be called when device ID is read
/// \param deviceId The device Id
///
- (void)deviceIdReceivedWithDeviceId:(NSString * _Null_unspecified)deviceId;
/// This function will be called when the device is initialized and ready for recording
- (void)deviceIsReadyToRecord;
/// This function will be called when there is any error occurred like data loss detected and alike
/// \param error The error spcified
///
- (void)dataErrorDetectedWithError:(NSError * _Null_unspecified)error;
@optional
/// This function is called to notify 12 lead connectivity status
- (void)leadsConnectivityStatusUpdatedWithCr:(int16_t)cr cl:(int16_t)cl c1:(int16_t)c1 c2:(int16_t)c2 c3:(int16_t)c3 c4:(int16_t)c4 c5:(int16_t)c5 c6:(int16_t)c6;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.0.1 (swiftlang-1001.0.82.4 clang-1001.0.46.5)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="EcgService",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC10EcgService14AnalysisResult")
@interface AnalysisResult : NSObject
@property (nonatomic, copy) NSArray<NSString *> * _Nullable autoInterpretationCodes;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable minnesotaCodes;
@property (nonatomic, copy, getter=template, setter=setTemplate:) NSArray<NSArray<NSNumber *> *> * _Nullable template_;
@property (nonatomic, copy) NSString * _Nullable heartBeatRate;
@property (nonatomic, copy) NSArray<NSDictionary<NSString *, NSString *> *> * _Nullable measurement;
@property (nonatomic, copy) NSArray<NSArray<NSNumber *> *> * _Nullable onoff;
@property (nonatomic, copy) NSString * _Nullable error;
@property (nonatomic, copy) NSString * _Nullable parameters;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable RRs;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable beatPositions;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable beatTypes;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10EcgService8Analyzer")
@interface Analyzer : NSObject
- (AnalysisResult * _Nonnull)analyzeWithData:(NSArray<NSArray<NSNumber *> *> * _Nonnull)data sampling:(NSInteger)sampling age:(NSInteger)age ageUnit:(NSString * _Nonnull)ageUnit gender:(NSString * _Nonnull)gender newBornMode:(NSInteger)newBornMode backRecording:(BOOL)backRecording SWIFT_WARN_UNUSED_RESULT;
- (AnalysisResult * _Nonnull)analyzeManualWithData:(NSArray<NSArray<NSNumber *> *> * _Nonnull)data sampling:(NSInteger)sampling age:(NSInteger)age ageUnit:(NSString * _Nonnull)ageUnit gender:(NSString * _Nonnull)gender newBornMode:(NSInteger)newBornMode backRecording:(BOOL)backRecording lead:(NSInteger)lead onOff:(int16_t * _Nullable)onOff onOffs:(int16_t * _Nullable * _Nullable)onOffs SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol DeviceCommunicationDelegate;
@class NSData;

SWIFT_CLASS("_TtC10EcgService9BleDevice")
@interface BleDevice : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// This function is for setting the delegate to receive events
- (void)setCommDelegate:(id <DeviceCommunicationDelegate> _Nonnull)delegate;
/// This function is for setting up a bunch of parameters
/// \param highPassFreq High pass frequency
///
/// \param lowPassFreq Low pass frequency
///
/// \param notchFreq Notch frequency
///
- (void)initializeWithSmoothEnabled:(BOOL)smoothEnabled baselineEnabled:(BOOL)baselineEnabled highPassFreq:(CGFloat)highPassFreq lowPassFreq:(CGFloat)lowPassFreq notchFreq:(CGFloat)notchFreq;
- (void)collectGarbage;
/// Call this function when there is new data received from BLE peripheral
/// \param data The raw data received
///
- (void)pushRawDataWithData:(NSData * _Nonnull)data;
- (void)testDelegate;
@end


SWIFT_PROTOCOL("_TtP10EcgService27DeviceCommunicationDelegate_")
@protocol DeviceCommunicationDelegate
/// This function will be called when there is data parsed
/// \param data The parsed data in type of [[CGFloat]]
///
- (void)dataReceivedWithData:(NSArray * _Null_unspecified)data;
/// This function will be called when a heart beat rate is calculated. Show this rate on monitor
/// \param hbr The heart beat rate
///
- (void)heartBeatRateDetectedWithHbr:(int32_t)hbr;
/// This function will be called when sampling rate is detected
/// \param rate The sampling rate is used by the BLE device
///
- (void)samplingRateReceivedWithRate:(int32_t)rate;
/// This function will be called when device ID is read
/// \param deviceId The device Id
///
- (void)deviceIdReceivedWithDeviceId:(NSString * _Null_unspecified)deviceId;
/// This function will be called when the device is initialized and ready for recording
- (void)deviceIsReadyToRecord;
/// This function will be called when there is any error occurred like data loss detected and alike
/// \param error The error spcified
///
- (void)dataErrorDetectedWithError:(NSError * _Null_unspecified)error;
@optional
/// This function is called to notify 12 lead connectivity status
- (void)leadsConnectivityStatusUpdatedWithCr:(int16_t)cr cl:(int16_t)cl c1:(int16_t)c1 c2:(int16_t)c2 c3:(int16_t)c3 c4:(int16_t)c4 c5:(int16_t)c5 c6:(int16_t)c6;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
